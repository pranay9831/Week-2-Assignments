/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid');
let todos = JSON.parse(fs.readFileSync('./tododb.json', 'utf8', (err, data) => {

  return data
}))

const app = express();
const port = 3000;

app.use(bodyParser.json());

// Getting all the Todos
function getTodos(req, res) {
  res.send(todos)
}


//Adding TOdo
addTodos = (req, res) => {
  const todo = req.body;
  const f_id = uuidv4();
  todo["id"] = f_id
  todos.push(todo);

  fs.writeFileSync('todoDb.json', JSON.stringify(todos), (err) => { if (err) { console.log("Cannot write") } })
  res.status(201)
  res.send(todo)
}

idExists = (check_id) => {
  let flag = 0;
  console.log(todos)
  for (let i = 0; i < todos.length; i++) {

    if (check_id == todos[i].id) {
      flag = 1
      console.log(todos[i]);
      return todos[i];
    }
  }
  if (flag === 0) {
    return -1;
  }

}

getTodoById = (req, res) => {
  let check_id = req.params.id;
  console.log(typeof (check_id))
  let serverRes = idExists(check_id)
  if (serverRes === -1) {
    res.status(404)
    res.send({ "response": `element with id ${check_id} Not found ` });
  }
  else {

    res.send(serverRes);
  }



}

updateTodoById = (req, res) => {
  let check_id = req.params.id;
  let updated_items = req.body;
  let check = idExists(check_id)
  if (check === -1) {
    res.status(404)
    res.send({ "response": `element with id ${check_id} Not found ` });
  }

  else {

    console.log(check)

    for (let i in updated_items) {
      todos[i] = updated_items[i];

    }
    fs.writeFileSync('todoDb.json', JSON.stringify(todos), (err) => { if (err) { console.log("Cannot write") } })
    console.log(updated_items)
    res.send("Content Updated")
    console.log(check.id)
  }

}

deleteTodoById = (req, res) => {
  check_id = req.params.id;
  if (idExists(check_id) === -1) {
    res.status(404)
  }
  else {

    for (let i = 0; i < todos.length; i++) {
      if (todos[i]["id"] == check_id) {
        todos.splice(i, 1);
        fs.writeFileSync('todoDb.json', JSON.stringify(todos), (err) => { if (err) { console.log("Cannot write") } })
        console.log()
        res.send(todos)
      }
    }

  }
}

//getting Todo by Id
app.get('/todos', getTodos)


app.post('/todos', addTodos)

app.get('/todos/:id', getTodoById)

app.put('/todos/:id', updateTodoById)

app.delete('/todos/:id', deleteTodoById)

app.listen(port, () => { console.log(`listening on Port ${port}`) })

module.exports = app;
